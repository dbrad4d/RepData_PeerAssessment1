geom_bar(stat="identity") +
labs(x="Date", y="Steps", title="          Total number of steps each day (no missing values)") +
theme_minimal() +
geom_hline(yintercept = mean_steps, col='blue',size=1)
grid.arrange(plot1, plot2, ncol = 1)
options(scipen=999)
mean_steps = round(mean(new_steps_per_day$steps))
median_steps = round(median(new_steps_per_day$steps))
plot2 <- ggplot(new_steps_per_day, aes(x=date, y=steps)) +
geom_bar(stat="identity") +
labs(x="Date", y="Steps", title="          Total number of steps each day (NAs removed)") +
theme_minimal() +
geom_hline(yintercept = mean_steps, col='blue',size=1)
grid.arrange(plot1, plot2, ncol = 1)
options(scipen=999)
mean_steps = round(mean(new_steps_per_day$steps))
median_steps = round(median(new_steps_per_day$steps))
plot2 <- ggplot(new_steps_per_day, aes(x=date, y=steps)) +
geom_bar(stat="identity") +
labs(x="Date", y="Steps", title="                Total number of steps each day (NAs removed)") +
theme_minimal() +
geom_hline(yintercept = mean_steps, col='blue',size=1)
grid.arrange(plot1, plot2, ncol = 1)
options(scipen=999)
mean_steps = round(mean(new_steps_per_day$steps))
median_steps = round(median(new_steps_per_day$steps))
plot2 <- ggplot(new_steps_per_day, aes(x=date, y=steps)) +
geom_bar(stat="identity") +
labs(x="Date", y="Steps", title="                      Total number of steps each day (NAs removed)") +
theme_minimal() +
geom_hline(yintercept = mean_steps, col='blue',size=1)
grid.arrange(plot1, plot2, ncol = 1)
options(scipen=999)
mean_steps = round(mean(new_steps_per_day$steps))
median_steps = round(median(new_steps_per_day$steps))
plot2 <- ggplot(new_steps_per_day, aes(x=date, y=steps)) +
geom_bar(stat="identity") +
labs(x="Date", y="Steps", title="                      Total number of steps each day (NAs imputed)") +
theme_minimal() +
geom_hline(yintercept = mean_steps, col='blue',size=1)
grid.arrange(plot1, plot2, ncol = 1)
View(new_steps_per_day)
new_steps_per_day <- activity
na_steps <- is.na(new_steps_per_day$steps)
mean_interval <- tapply(new_steps_per_day$steps, new_steps_per_day$interval, mean, na.rm=TRUE)
new_steps_per_day$steps[na_steps] <- mean_interval[as.character(new_steps_per_day$interval[na_steps])]
summary(new_steps_per_day)
options(scipen=999)
new_steps_per_day <- ddply(new_steps_per_day, ~date, summarise, steps=sum(steps, na.rm = TRUE))
mean_steps = round(mean(new_steps_per_day$steps))
median_steps = round(median(new_steps_per_day$steps))
plot2 <- ggplot(new_steps_per_day, aes(x=date, y=steps)) +
geom_bar(stat="identity") +
labs(x="Date", y="Steps", title="                      Total number of steps each day (NAs imputed)") +
theme_minimal() +
geom_hline(yintercept = mean_steps, col='blue',size=1)
grid.arrange(plot1, plot2, ncol = 1)
options(scipen=999)
new_steps_per_day <- ddply(new_steps_per_day, ~date, summarise, steps=sum(steps, na.rm = TRUE))
mean_steps_new = round(mean(new_steps_per_day$steps))
median_steps_new = round(median(new_steps_per_day$steps))
plot2 <- ggplot(new_steps_per_day, aes(x=date, y=steps)) +
geom_bar(stat="identity") +
labs(x="Date", y="Steps", title="                      Total number of steps each day (NAs imputed)") +
theme_minimal() +
geom_hline(yintercept = mean_steps, col='blue',size=1)
grid.arrange(plot1, plot2, ncol = 1)
View(new_steps_per_day)
?weekdays()
weekdays(8/16/2018)
weekdays(Sys.Date)
weekdays(Sys.Date)
Error in UseMethod("weekdays") :
no applicable method for 'weekdays' applied to an object of class "function"
weekdays(Sys.Date, abbreviate)
weekdays(Sys.Date, abbreviate())
weekdays(x, abbreviate)
x = "2018-08-16"
weekdays(x, abbreviate)
library(lubridate)
weekdays(x, abbreviate)
library(timeDate)
install.packages(timeDate)
weekdays(Sys.Date()+0:6)
weekdays(Sys.Date()+3:4)
weekdays(Sys.Date()+2:3)
weekend_days <- weekdays(Sys.Date()+2:3)
#create vector with "Saturday" and "Sunday"
weekend_days <- weekdays(Sys.Date()+2:3)
new_steps_per_day <- mutate(new_steps_per_day, day.type = ifelse(weekdays(new_steps_per_day$date+IL) %in% weekend_days, "weekend", "weekday"))
#create vector with "Saturday" and "Sunday"
weekend_days <- weekdays(Sys.Date()+2:3)
new_steps_per_day <- mutate(new_steps_per_day, day.type = ifelse(weekdays(new_steps_per_day$date+0) %in% weekend_days, "weekend", "weekday"))
library(ggplot2)
#library(dplyr)
library(plyr)
#library(statsr)
library(data.table)
#library(ggplot2)
library(grid)
library(gridExtra)
#library(knitr)
#library(kableExtra)
#library(tidyverse)
library(lubridate)
# set working & create data directory
setwd("C:\\Users\\dabradford\\Desktop\\Coursera\\DataSci\\Reproducible\\RepData_PeerAssessment1")
if(!file.exists("./data")){dir.create("./data")}
# download activity monitoring data
get.data.project <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(get.data.project,destfile="./data/activity_monitoring_data.zip",method="auto")
zipfile.data = "activity_monitoring_data.zip"
# make sure the data is in the working directory if not download the zip file into the to zipfile.data and unzip it
if(!file.exists(zipfile.data)) {
unzip(zipfile="./data/activity_monitoring_data.zip",exdir="./data")
}
path_act <- file.path("./data" , "./data/activity_monitoring_data")
files<-list.files(path_act, recursive=TRUE)
# Read data file
activity <- data.table::fread("./data/activity.csv")
activity$date <- as.Date(activity$date, "%Y-%m-%d")
# inspect data file
#str(activity)
#head(activity)
options(scipen=999)
steps_per_day <- ddply(activity, ~date, summarise, steps=sum(steps, na.rm = TRUE))
mean_steps = round(mean(steps_per_day$steps[steps_per_day$steps != 0]), 0)
median_steps = round(median(steps_per_day$steps[steps_per_day$steps != 0]), 0)
plot1 <- ggplot(steps_per_day, aes(x=date, y=steps)) +
geom_bar(stat="identity") +
labs(x="Date", y="Steps", title="                             Total number of steps each day") +
theme_minimal() +
geom_hline(yintercept = round(mean(steps_per_day$steps[steps_per_day$steps != 0]), 0), col='blue',size=1)
plot1
time_series <- tapply(activity$steps, activity$interval, mean, na.rm = TRUE)
plot(row.names(time_series), time_series, type = "l", xlab = "5-min interval",
ylab = "Avg across all Days", main = "Avg # of steps",
col = "blue")
max_interval <- names(which.max(time_series))
summary(activity)
new_steps_per_day <- activity
na_steps <- is.na(new_steps_per_day$steps)
mean_interval <- tapply(new_steps_per_day$steps, new_steps_per_day$interval, mean, na.rm=TRUE)
new_steps_per_day$steps[na_steps] <- mean_interval[as.character(new_steps_per_day$interval[na_steps])]
summary(new_steps_per_day)
options(scipen=999)
grp_steps_per_day <- ddply(grp_steps_per_day, ~date, summarise, steps=sum(steps, na.rm = TRUE))
options(scipen=999)
grp_steps_per_day <- ddply(new_steps_per_day, ~date, summarise, steps=sum(steps, na.rm = TRUE))
mean_steps_new = round(mean(grp_steps_per_day$steps))
median_steps_new = round(median(grp_steps_per_day$steps))
plot2 <- ggplot(grp_steps_per_day, aes(x=date, y=steps)) +
geom_bar(stat="identity") +
labs(x="Date", y="Steps", title="                      Total number of steps each day (NAs imputed)") +
theme_minimal() +
geom_hline(yintercept = mean_steps, col='blue',size=1)
grid.arrange(plot1, plot2, ncol = 1)
View(new_steps_per_day)
library(ggplot2)
#library(dplyr)
library(plyr)
#library(statsr)
library(data.table)
#library(ggplot2)
library(grid)
library(gridExtra)
#library(knitr)
#library(kableExtra)
#library(tidyverse)
library(lubridate)
# set working & create data directory
setwd("C:\\Users\\dabradford\\Desktop\\Coursera\\DataSci\\Reproducible\\RepData_PeerAssessment1")
if(!file.exists("./data")){dir.create("./data")}
# download activity monitoring data
get.data.project <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(get.data.project,destfile="./data/activity_monitoring_data.zip",method="auto")
zipfile.data = "activity_monitoring_data.zip"
# make sure the data is in the working directory if not download the zip file into the to zipfile.data and unzip it
if(!file.exists(zipfile.data)) {
unzip(zipfile="./data/activity_monitoring_data.zip",exdir="./data")
}
path_act <- file.path("./data" , "./data/activity_monitoring_data")
files<-list.files(path_act, recursive=TRUE)
# Read data file
activity <- data.table::fread("./data/activity.csv")
activity$date <- as.Date(activity$date, "%Y-%m-%d")
# inspect data file
#str(activity)
#head(activity)
options(scipen=999)
steps_per_day <- ddply(activity, ~date, summarise, steps=sum(steps, na.rm = TRUE))
mean_steps = round(mean(steps_per_day$steps[steps_per_day$steps != 0]), 0)
median_steps = round(median(steps_per_day$steps[steps_per_day$steps != 0]), 0)
plot1 <- ggplot(steps_per_day, aes(x=date, y=steps)) +
geom_bar(stat="identity") +
labs(x="Date", y="Steps", title="                             Total number of steps each day") +
theme_minimal() +
geom_hline(yintercept = round(mean(steps_per_day$steps[steps_per_day$steps != 0]), 0), col='blue',size=1)
plot1
time_series <- tapply(activity$steps, activity$interval, mean, na.rm = TRUE)
plot(row.names(time_series), time_series, type = "l", xlab = "5-min interval",
ylab = "Avg across all Days", main = "Avg # of steps",
col = "blue")
max_interval <- names(which.max(time_series))
summary(activity)
new_steps_per_day <- activity
na_steps <- is.na(new_steps_per_day$steps)
mean_interval <- tapply(new_steps_per_day$steps, new_steps_per_day$interval, mean, na.rm=TRUE)
new_steps_per_day$steps[na_steps] <- mean_interval[as.character(new_steps_per_day$interval[na_steps])]
summary(new_steps_per_day)
options(scipen=999)
grp_steps_per_day <- ddply(new_steps_per_day, ~date, summarise, steps=sum(steps, na.rm = TRUE))
mean_steps_new = round(mean(grp_steps_per_day$steps))
median_steps_new = round(median(grp_steps_per_day$steps))
plot2 <- ggplot(grp_steps_per_day, aes(x=date, y=steps)) +
geom_bar(stat="identity") +
labs(x="Date", y="Steps", title="                      Total number of steps each day (NAs imputed)") +
theme_minimal() +
geom_hline(yintercept = mean_steps, col='blue',size=1)
grid.arrange(plot1, plot2, ncol = 1)
#create vector with "Saturday" and "Sunday"
weekend_days <- weekdays(Sys.Date()+2:3)
new_steps_per_day <- mutate(new_steps_per_day, day.type = ifelse(weekdays(new_steps_per_day$date+0) %in% weekend_days, "weekend", "weekday"))
View(new_steps_per_day)
View(new_steps_per_day)
qplot(interval, steps, data = new_steps_per_day, facets = day.type~., geom="line")
weekday <- group_by(new_steps_per_day, interval, day.type)
library(ggplot2)
library(dplyr)
library(plyr)
#library(statsr)
library(data.table)
#library(ggplot2)
library(grid)
library(gridExtra)
#library(knitr)
#library(kableExtra)
#library(tidyverse)
library(lubridate)
weekday <- group_by(new_steps_per_day, interval, day.type)
qplot(interval, steps, data = weekday, facets = day.type~., geom="line")
View(weekday)
weekday <- group_by(new_steps_per_day, interval, day.type)
weekday_sum <- summarize(weekday, steps= mean(steps, na.rm = TRUE ))
qplot(interval, steps, data = weekday_sum, facets = day.type~., geom="line")
library(ggplot2)
library(dplyr)
library(plyr)
#library(statsr)
library(data.table)
#library(ggplot2)
library(grid)
library(gridExtra)
#library(knitr)
#library(kableExtra)
#library(tidyverse)
library(lubridate)
# set working & create data directory
setwd("C:\\Users\\dabradford\\Desktop\\Coursera\\DataSci\\Reproducible\\RepData_PeerAssessment1")
if(!file.exists("./data")){dir.create("./data")}
# download activity monitoring data
get.data.project <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(get.data.project,destfile="./data/activity_monitoring_data.zip",method="auto")
zipfile.data = "activity_monitoring_data.zip"
# make sure the data is in the working directory if not download the zip file into the to zipfile.data and unzip it
if(!file.exists(zipfile.data)) {
unzip(zipfile="./data/activity_monitoring_data.zip",exdir="./data")
}
path_act <- file.path("./data" , "./data/activity_monitoring_data")
files<-list.files(path_act, recursive=TRUE)
# Read data file
activity <- data.table::fread("./data/activity.csv")
activity$date <- as.Date(activity$date, "%Y-%m-%d")
# inspect data file
#str(activity)
#head(activity)
options(scipen=999)
steps_per_day <- ddply(activity, ~date, summarise, steps=sum(steps, na.rm = TRUE))
mean_steps = round(mean(steps_per_day$steps[steps_per_day$steps != 0]), 0)
median_steps = round(median(steps_per_day$steps[steps_per_day$steps != 0]), 0)
plot1 <- ggplot(steps_per_day, aes(x=date, y=steps)) +
geom_bar(stat="identity") +
labs(x="Date", y="Steps", title="                             Total number of steps each day") +
theme_minimal() +
geom_hline(yintercept = round(mean(steps_per_day$steps[steps_per_day$steps != 0]), 0), col='blue',size=1)
plot1
time_series <- tapply(activity$steps, activity$interval, mean, na.rm = TRUE)
plot(row.names(time_series), time_series, type = "l", xlab = "5-min interval",
ylab = "Avg across all Days", main = "Avg # of steps",
col = "blue")
max_interval <- names(which.max(time_series))
summary(activity)
new_steps_per_day <- activity
na_steps <- is.na(new_steps_per_day$steps)
mean_interval <- tapply(new_steps_per_day$steps, new_steps_per_day$interval, mean, na.rm=TRUE)
new_steps_per_day$steps[na_steps] <- mean_interval[as.character(new_steps_per_day$interval[na_steps])]
summary(new_steps_per_day)
options(scipen=999)
grp_steps_per_day <- ddply(new_steps_per_day, ~date, summarise, steps=sum(steps, na.rm = TRUE))
mean_steps_new = round(mean(grp_steps_per_day$steps))
median_steps_new = round(median(grp_steps_per_day$steps))
plot2 <- ggplot(grp_steps_per_day, aes(x=date, y=steps)) +
geom_bar(stat="identity") +
labs(x="Date", y="Steps", title="                      Total number of steps each day (NAs imputed)") +
theme_minimal() +
geom_hline(yintercept = mean_steps, col='blue',size=1)
grid.arrange(plot1, plot2, ncol = 1)
#create vector with "Saturday" and "Sunday"
weekend_days <- weekdays(Sys.Date()+2:3)
new_steps_per_day <- mutate(new_steps_per_day, day.type = ifelse(weekdays(new_steps_per_day$date+0) %in% weekend_days, "weekend", "weekday"))
weekday <- group_by(new_steps_per_day, interval, day.type)
weekday_sum <- summarize(weekday, steps= mean(steps, na.rm = TRUE ))
qplot(interval, steps, data = weekday_sum, facets = day.type~., geom="line")
library(ggplot2)
library(dplyr)
library(plyr)
library(data.table)
library(grid)
library(gridExtra)
library(lubridate)
# set working & create data directory
setwd("C:\\Users\\dabradford\\Desktop\\Coursera\\DataSci\\Reproducible\\RepData_PeerAssessment1")
if(!file.exists("./data")){dir.create("./data")}
# download activity monitoring data
get.data.project <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(get.data.project,destfile="./data/activity_monitoring_data.zip",method="auto")
zipfile.data = "activity_monitoring_data.zip"
# make sure the data is in the working directory if not download the zip file into the to zipfile.data and unzip it
if(!file.exists(zipfile.data)) {
unzip(zipfile="./data/activity_monitoring_data.zip",exdir="./data")
}
path_act <- file.path("./data" , "./data/activity_monitoring_data")
files<-list.files(path_act, recursive=TRUE)
# Read data file
activity <- data.table::fread("./data/activity.csv")
activity$date <- as.Date(activity$date, "%Y-%m-%d")
# inspect data file
#str(activity)
#head(activity)
options(scipen=999)
steps_per_day <- ddply(activity, ~date, summarise, steps=sum(steps, na.rm = TRUE))
mean_steps = round(mean(steps_per_day$steps[steps_per_day$steps != 0]), 0)
median_steps = round(median(steps_per_day$steps[steps_per_day$steps != 0]), 0)
plot1 <- ggplot(steps_per_day, aes(x=date, y=steps)) +
geom_bar(stat="identity") +
labs(x="Date", y="Steps", title="                             Total number of steps each day") +
theme_minimal() +
geom_hline(yintercept = round(mean(steps_per_day$steps[steps_per_day$steps != 0]), 0), col='blue',size=1)
plot1
time_series <- tapply(activity$steps, activity$interval, mean, na.rm = TRUE)
plot(row.names(time_series), time_series, type = "l", xlab = "5-min interval",
ylab = "Avg across all Days", main = "Avg # of steps",
col = "blue")
max_interval <- names(which.max(time_series))
summary(activity)
options(scipen=999)
grp_steps_per_day <- ddply(new_steps_per_day, ~date, summarise, steps=sum(steps, na.rm = TRUE))
mean_steps_new = round(mean(grp_steps_per_day$steps))
median_steps_new = round(median(grp_steps_per_day$steps))
plot2 <- ggplot(grp_steps_per_day, aes(x=date, y=steps)) +
geom_bar(stat="identity") +
labs(x="Date", y="Steps", title="                      Total number of steps each day (NAs imputed)") +
theme_minimal() +
geom_hline(yintercept = mean_steps, col='blue',size=1)
grid.arrange(plot1, plot2, ncol = 1)
#create vector with "Saturday" and "Sunday"
weekend_days <- weekdays(Sys.Date()+2:3)
new_steps_per_day <- mutate(new_steps_per_day, day.type = ifelse(weekdays(new_steps_per_day$date+0) %in% weekend_days, "weekend", "weekday"))
weekday <- group_by(new_steps_per_day, interval, day.type)
weekday_sum <- summarize(weekday, steps= mean(steps, na.rm = TRUE ))
qplot(interval, steps, data = weekday_sum, facets = day.type~., geom="line")
View(new_steps_per_day)
weekday <- group_by(new_steps_per_day, interval)
weekday_sum <- summarize(weekday, steps= mean(steps, na.rm = TRUE ))
qplot(interval, steps, data = weekday_sum, facets = day.type~., geom="line")
weekday <- group_by(new_steps_per_day, date, interval, day.type)
weekday_sum <- summarize(weekday, steps= mean(steps, na.rm = TRUE ))
qplot(interval, steps, data = weekday_sum, facets = day.type~., geom="line")
weekday <- aggregate(steps ~ interval, data = new_steps_per_day, FUN = mean, na.rm = TRUE)
weekday_sum <- summarize(weekday, steps= mean(steps, na.rm = TRUE ))
qplot(interval, steps, data = weekday_sum, facets = day.type~., geom="line")
weekday <- aggregate(steps ~ interval, data = new_steps_per_day, FUN = mean, na.rm = TRUE)
weekday_sum <- summarize(weekday, steps= mean(steps, na.rm = TRUE ))
ggplot(weekday_sum, aes(x =interval , y=steps, color=day.type)) +
geom_line() +
labs(title = "Ave Daily Steps (type of day)", x = "Interval", y = "Total Number of Steps") +
facet_wrap(~ day.type, ncol = 1, nrow=2)```
weekday <- aggregate(steps ~ interval, data = new_steps_per_day, FUN = mean, na.rm = TRUE)
weekday_sum <- summarize(weekday, steps= mean(steps, na.rm = TRUE ))
ggplot(weekday_sum, aes(x =interval , y=steps)) +
geom_line() +
labs(title = "Ave Daily Steps (type of day)", x = "Interval", y = "Total Number of Steps") +
facet_wrap(~ day.type, ncol = 1, nrow=2)```
weekday <- aggregate(steps ~ interval, data = new_steps_per_day, FUN = mean, na.rm = TRUE)
weekday_sum <- summarize(weekday, steps= mean(steps, na.rm = TRUE ))
ggplot(weekday, aes(x =interval , y=steps)) +
geom_line() +
labs(title = "Ave Daily Steps (type of day)", x = "Interval", y = "Total Number of Steps") +
facet_wrap(~ day.type, ncol = 1, nrow=2)```
weekday <- aggregate(steps ~ interval + day.type, data = new_steps_per_day, FUN = mean, na.rm = TRUE)
weekday_sum <- summarize(weekday, steps= mean(steps, na.rm = TRUE ))
ggplot(weekday, aes(x =interval , y=steps)) +
geom_line() +
labs(title = "Ave Daily Steps (type of day)", x = "Interval", y = "Total Number of Steps") +
facet_wrap(~ day.type, ncol = 1, nrow=2)```
weekday <- aggregate(steps ~ interval + day.type, data = new_steps_per_day, FUN = mean, na.rm = TRUE)
weekday_sum <- summarize(weekday, steps= mean(steps, na.rm = TRUE ))
ggplot(meaninterval_new, aes(x=interval, y=steps)) +
geom_line(color="blue", size=1) +
facet_wrap(~day.type, nrow=2) +
labs(x="\nInterval", y="\nNumber of steps")
weekday <- aggregate(steps ~ interval + day.type, data = new_steps_per_day, FUN = mean, na.rm = TRUE)
weekday_sum <- summarize(weekday, steps= mean(steps, na.rm = TRUE ))
ggplot(weekday_sum, aes(x=interval, y=steps)) +
geom_line(color="blue", size=1) +
facet_wrap(~day.type, nrow=2) +
labs(x="\nInterval", y="\nNumber of steps")
View(weekday_sum)
weekday <- aggregate(steps ~ interval + day.type, data = new_steps_per_day, FUN = mean, na.rm = TRUE)
weekday_sum <- summarize(weekday, steps= mean(steps, na.rm = TRUE ))
ggplot(weekday, aes(x=interval, y=steps)) +
geom_line(color="blue", size=1) +
facet_wrap(~day.type, nrow=2) +
labs(x="\nInterval", y="\nNumber of steps")
weekday <- aggregate(steps ~ interval + day.type, data = new_steps_per_day, FUN = mean, na.rm = TRUE)
weekday_sum <- summarize(weekday, steps= mean(steps, na.rm = TRUE ))
ggplot(weekday, aes(x=interval, y=steps)) +
geom_line(color="blue", size=1) +
facet_wrap(~day.type, nrow=2) +
labs(x="\nInterval", y="\nNumber of steps")
weekday <- aggregate(steps ~ interval + day.type, data = new_steps_per_day, FUN = mean, na.rm = TRUE)
weekday_sum <- summarize(weekday, steps= mean(steps, na.rm = TRUE ))
ggplot(weekday, aes(x=interval, y=steps)) +
geom_line(color="lightblue", size=1) +
facet_wrap(~day.type, nrow=2) +
labs(x="\nInterval", y="\nNumber of steps")
weekday <- aggregate(steps ~ interval + day.type, data = new_steps_per_day, FUN = mean, na.rm = TRUE)
weekday_sum <- summarize(weekday, steps= mean(steps, na.rm = TRUE ))
ggplot(weekday, aes(x=interval, y=steps)) +
geom_line(color="blue", size=1) +
facet_wrap(~day.type, nrow=2) +
labs(x="\nInterval", y="\nNumber of steps")
weekday <- aggregate(steps ~ interval + day.type, data = new_steps_per_day, FUN = mean, na.rm = TRUE)
ggplot(weekday, aes(x=interval, y=steps)) +
geom_line(color="blue", size=1) +
facet_wrap(~day.type, nrow=2) +
labs(x="\nInterval", y="\nNumber of steps")
library(ggplot2)
library(dplyr)
library(plyr)
library(data.table)
library(grid)
library(gridExtra)
library(lubridate)
# set working & create data directory
setwd("C:\\Users\\dabradford\\Desktop\\Coursera\\DataSci\\Reproducible\\RepData_PeerAssessment1")
if(!file.exists("./data")){dir.create("./data")}
# download activity monitoring data
get.data.project <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(get.data.project,destfile="./data/activity_monitoring_data.zip",method="auto")
zipfile.data = "activity_monitoring_data.zip"
# make sure the data is in the working directory if not download the zip file into the to zipfile.data and unzip it
if(!file.exists(zipfile.data)) {
unzip(zipfile="./data/activity_monitoring_data.zip",exdir="./data")
}
path_act <- file.path("./data" , "./data/activity_monitoring_data")
files<-list.files(path_act, recursive=TRUE)
# Read data file
activity <- data.table::fread("./data/activity.csv")
activity$date <- as.Date(activity$date, "%Y-%m-%d")
# inspect data file
#str(activity)
#head(activity)
options(scipen=999)
steps_per_day <- ddply(activity, ~date, summarise, steps=sum(steps, na.rm = TRUE))
mean_steps = round(mean(steps_per_day$steps[steps_per_day$steps != 0]), 0)
median_steps = round(median(steps_per_day$steps[steps_per_day$steps != 0]), 0)
plot1 <- ggplot(steps_per_day, aes(x=date, y=steps)) +
geom_bar(stat="identity") +
labs(x="Date", y="Steps", title="                             Total number of steps each day") +
theme_minimal() +
geom_hline(yintercept = round(mean(steps_per_day$steps[steps_per_day$steps != 0]), 0), col='blue',size=1)
plot1
time_series <- tapply(activity$steps, activity$interval, mean, na.rm = TRUE)
plot(row.names(time_series), time_series, type = "l", xlab = "5-min interval",
ylab = "Avg across all Days", main = "Avg # of steps",
col = "blue")
max_interval <- names(which.max(time_series))
summary(activity)
new_steps_per_day <- activity
na_steps <- is.na(new_steps_per_day$steps)
mean_interval <- tapply(new_steps_per_day$steps, new_steps_per_day$interval, mean, na.rm=TRUE)
new_steps_per_day$steps[na_steps] <- mean_interval[as.character(new_steps_per_day$interval[na_steps])]
summary(new_steps_per_day)
options(scipen=999)
grp_steps_per_day <- ddply(new_steps_per_day, ~date, summarise, steps=sum(steps, na.rm = TRUE))
mean_steps_new = round(mean(grp_steps_per_day$steps))
median_steps_new = round(median(grp_steps_per_day$steps))
plot2 <- ggplot(grp_steps_per_day, aes(x=date, y=steps)) +
geom_bar(stat="identity") +
labs(x="Date", y="Steps", title="                      Total number of steps each day (NAs imputed)") +
theme_minimal() +
geom_hline(yintercept = mean_steps, col='blue',size=1)
grid.arrange(plot1, plot2, ncol = 1)
#create vector with "Saturday" and "Sunday"
weekend_days <- weekdays(Sys.Date()+2:3)
new_steps_per_day <- mutate(new_steps_per_day, day.type = ifelse(weekdays(new_steps_per_day$date+0) %in% weekend_days, "weekend", "weekday"))
weekday <- aggregate(steps ~ interval + day.type, data = new_steps_per_day, FUN = mean, na.rm = TRUE)
ggplot(weekday, aes(x=interval, y=steps)) +
geom_line(color="blue", size=1) +
facet_wrap(~day.type, nrow=2) +
labs(x="\nInterval", y="\nNumber of steps")
